### Starting build.
# Target: semanticoTest.ml.depends, tags: { extension:ml, file:semanticoTest.ml, ocaml, ocamldep, package(menhirLib), quiet }
ocamlfind ocamldep -package menhirLib -modules semanticoTest.ml > semanticoTest.ml.depends # cached
# Target: ast.ml.depends, tags: { extension:ml, file:ast.ml, ocaml, ocamldep, package(menhirLib), quiet }
ocamlfind ocamldep -package menhirLib -modules ast.ml > ast.ml.depends # cached
# Target: ast.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, package(menhirLib), quiet }
ocamlfind ocamlc -c -package menhirLib -o ast.cmo ast.ml # cached
# Target: lualexer.mll, tags: { extension:mll, file:lualexer.mll, lexer, ocaml, ocamllex, package(menhirLib), quiet }
/home/henrique/.opam/4.02.1/bin/ocamllex.opt -q lualexer.mll # cached
# Target: lualexer.ml.depends, tags: { extension:ml, file:lualexer.ml, ocaml, ocamldep, package(menhirLib), quiet }
ocamlfind ocamldep -package menhirLib -modules lualexer.ml > lualexer.ml.depends # cached
# Target: parser.mly.depends, tags: { extension:mly, file:parser.mly, menhir_ocamldep, ocaml, ocamldep, package(menhirLib), quiet }
menhir --table --raw-depend --ocamldep 'ocamlfind ocamldep -modules' parser.mly > parser.mly.depends # cached
# Target: sast.ml.depends, tags: { extension:ml, file:sast.ml, ocaml, ocamldep, package(menhirLib), quiet }
ocamlfind ocamldep -package menhirLib -modules sast.ml > sast.ml.depends # cached
# Target: sast.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:sast.cmo, file:sast.ml, implem, ocaml, package(menhirLib), quiet }
ocamlfind ocamlc -c -package menhirLib -o sast.cmo sast.ml # cached
# Target: parser.mly, tags: { byte, compile, extension:mly, file:parser.mly, menhir, ocaml, package(menhirLib), parser, quiet }
menhir --table --ocamlc 'ocamlfind ocamlc -package menhirLib' --infer parser.mly # cached
# Target: parser.mli.depends, tags: { extension:mli, file:parser.mli, ocaml, ocamldep, package(menhirLib), quiet }
ocamlfind ocamldep -package menhirLib -modules parser.mli > parser.mli.depends # cached
# Target: parser.cmi, tags: { byte, compile, extension:mli, file:parser.mli, interf, ocaml, package(menhirLib), quiet }
ocamlfind ocamlc -c -package menhirLib -o parser.cmi parser.mli # cached
# Target: lualexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lualexer.cmo, file:lualexer.ml, implem, ocaml, package(menhirLib), quiet }
ocamlfind ocamlc -c -package menhirLib -o lualexer.cmo lualexer.ml # cached
# Target: semantico.mli.depends, tags: { extension:mli, file:semantico.mli, ocaml, ocamldep, package(menhirLib), quiet }
ocamlfind ocamldep -package menhirLib -modules semantico.mli > semantico.mli.depends # cached
# Target: ambiente.mli.depends, tags: { extension:mli, file:ambiente.mli, ocaml, ocamldep, package(menhirLib), quiet }
ocamlfind ocamldep -package menhirLib -modules ambiente.mli > ambiente.mli.depends # cached
# Target: ambiente.cmi, tags: { byte, compile, extension:mli, file:ambiente.mli, interf, ocaml, package(menhirLib), quiet }
ocamlfind ocamlc -c -package menhirLib -o ambiente.cmi ambiente.mli # cached
# Target: semantico.cmi, tags: { byte, compile, extension:mli, file:semantico.mli, interf, ocaml, package(menhirLib), quiet }
ocamlfind ocamlc -c -package menhirLib -o semantico.cmi semantico.mli # cached
# Target: semanticoTest.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:semanticoTest.cmo, file:semanticoTest.ml, implem, ocaml, package(menhirLib), quiet }
ocamlfind ocamlc -c -package menhirLib -o semanticoTest.cmo semanticoTest.ml # cached
# Target: parser.ml.depends, tags: { extension:ml, file:parser.ml, ocaml, ocamldep, package(menhirLib), quiet }
ocamlfind ocamldep -package menhirLib -modules parser.ml > parser.ml.depends # cached
# Target: parser.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:parser.cmo, file:parser.ml, implem, ocaml, package(menhirLib), quiet }
ocamlfind ocamlc -c -package menhirLib -o parser.cmo parser.ml # cached
# Target: semantico.ml.depends, tags: { extension:ml, file:semantico.ml, ocaml, ocamldep, package(menhirLib), quiet }
ocamlfind ocamldep -package menhirLib -modules semantico.ml > semantico.ml.depends # cached
# Target: tast.ml.depends, tags: { extension:ml, file:tast.ml, ocaml, ocamldep, package(menhirLib), quiet }
ocamlfind ocamldep -package menhirLib -modules tast.ml > tast.ml.depends # cached
# Target: tast.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:tast.cmo, file:tast.ml, implem, ocaml, package(menhirLib), quiet }
ocamlfind ocamlc -c -package menhirLib -o tast.cmo tast.ml # cached
# Target: semantico.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:semantico.cmo, file:semantico.ml, implem, ocaml, package(menhirLib), quiet }
ocamlfind ocamlc -c -package menhirLib -o semantico.cmo semantico.ml
+ ocamlfind ocamlc -c -package menhirLib -o semantico.cmo semantico.ml
File "semantico.ml", line 8, characters 16-146:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
Varcol (_, _)
File "semantico.ml", line 7, characters 2-252:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(ExpOp (_, _, _)|ExpFunCall (_, _))
File "semantico.ml", line 21, characters 2-219:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
PontoPonto
File "semantico.ml", line 49, characters 4-75:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
Char
File "semantico.ml", line 62, characters 32-37:
Error: This expression has type int but an expression was expected of type
         int Ast.pos = int * Lexing.position
Command exited with code 2.
# Compilation unsuccessful.
